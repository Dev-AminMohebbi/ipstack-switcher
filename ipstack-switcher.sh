#!/usr/bin/env bash

# NOTE: Do not edit this file manually unless you know what you're doing.

# =============================================================================================
#  _ ______   ______                  _         ______       _            _                 
# | (_____ \ / _____) _              | |       / _____)     (_)  _       | |                
# | |_____) | (____ _| |_ _____  ____| |  _   ( (____  _ _ _ _ _| |_ ____| |__  _____  ____ 
# | |  ____/ \____ (_   _|____ |/ ___) |_/ )   \____ \| | | | (_   _) ___)  _ \| ___ |/ ___)
# | | |      _____) )| |_/ ___ ( (___|  _ (    _____) ) | | | | | |( (___| | | | ____| |    
# |_|_|     (______/  \__)_____|\____)_| \_)  (______/ \___/|_|  \__)____)_| |_|_____)_|    
# =============================================================================================                                                                                                                                                                                                                                                            
#                                                                                         
#   IPStack Switcher v1.0 - Global Edition                                                
#   Cross-distribution IPv4/IPv6 stack management tool                                    
#                                                                                         
#   Supports: Ubuntu, Debian, CentOS, RHEL, Fedora, Arch, openSUSE                        
#                                                                                         
#   Author: MohammadAmin Mohebbi Nourulddin Vand                                          
#   License: MIT                                                                          
#   Repository: https://github.com/Dev-AminMohebbi/ipstack-switcher                       
# =============================================================================================

set -euo pipefail  # Strict error handling

# Version and metadata
readonly SCRIPT_VERSION="1.0.0"
readonly SCRIPT_NAME="IPStack Switcher"
readonly GITHUB_REPO="https://github.com/Dev-AminMohebbi/ipstack-switcher"

# Color definitions
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly WHITE='\033[1;37m'
readonly GRAY='\033[0;37m'
readonly BOLD='\033[1m'
readonly RESET='\033[0m'

# Unicode symbols for better visual appeal
readonly CHECK_MARK="✓"
readonly CROSS_MARK="✗"
readonly INFO_MARK="ℹ"
readonly WARNING_MARK="⚠"
readonly GEAR_MARK="⚙"
readonly NETWORK_MARK="🌐"

# System detection variables
DISTRO=""
DISTRO_VERSION=""
PACKAGE_MANAGER=""
SERVICE_MANAGER=""
NETWORK_MANAGER=""

# Configuration paths for different distributions
declare -A CONFIG_PATHS=(
    ["debian"]="/etc/sysctl.d/99-disable-ipv6.conf"
    ["ubuntu"]="/etc/sysctl.d/99-disable-ipv6.conf"
    ["centos"]="/etc/sysctl.d/99-disable-ipv6.conf"
    ["rhel"]="/etc/sysctl.d/99-disable-ipv6.conf"
    ["fedora"]="/etc/sysctl.d/99-disable-ipv6.conf"
    ["arch"]="/etc/sysctl.d/99-disable-ipv6.conf"
    ["opensuse"]="/etc/sysctl.d/99-disable-ipv6.conf"
    ["alpine"]="/etc/sysctl.d/99-disable-ipv6.conf"
)

#==============================================================================#
# UTILITY FUNCTIONS
#==============================================================================#

# Enhanced logging with timestamps
log() {
    local level="$1"
    shift
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    case "$level" in
        "INFO")  echo -e "${CYAN}[${timestamp}] ${INFO_MARK} $*${RESET}" ;;
        "WARN")  echo -e "${YELLOW}[${timestamp}] ${WARNING_MARK} $*${RESET}" ;;
        "ERROR") echo -e "${RED}[${timestamp}] ${CROSS_MARK} $*${RESET}" >&2 ;;
        "SUCCESS") echo -e "${GREEN}[${timestamp}] ${CHECK_MARK} $*${RESET}" ;;
        "DEBUG") [[ "${DEBUG:-0}" == "1" ]] && echo -e "${GRAY}[${timestamp}] DEBUG: $*${RESET}" ;;
    esac
}

# Enhanced banner with system info
show_banner() {
    clear
    echo -e "${CYAN}╔══════════════════════════════════════════════════════════════╗"
    echo -e "║  ${BOLD}${WHITE}${GEAR_MARK} IPStack Switcher v${SCRIPT_VERSION} - Global Edition${RESET}${CYAN}                ║"
    echo -e "║  ${GRAY}Cross-distribution IPv4/IPv6 stack management${RESET}${CYAN}              ║"
    echo -e "║                                                              ║"
    echo -e "║  ${YELLOW}System:${RESET}${CYAN} $(uname -s) $(uname -r | cut -d- -f1)${CYAN}                              ║"
    echo -e "║  ${YELLOW}Distro:${RESET}${CYAN} ${DISTRO^} ${DISTRO_VERSION}${CYAN}                                    ║"
    echo -e "║  ${YELLOW}Network:${RESET}${CYAN} ${NETWORK_MANAGER}${CYAN}                                        ║"
    echo -e "╚══════════════════════════════════════════════════════════════╝${RESET}"
    echo
}

# Comprehensive system detection
detect_system() {
    log "INFO" "Detecting system configuration..."
    
    # Detect distribution
    if [[ -f /etc/os-release ]]; then
        source /etc/os-release
        DISTRO=$(echo "$ID" | tr '[:upper:]' '[:lower:]')
        DISTRO_VERSION="$VERSION_ID"
    elif [[ -f /etc/redhat-release ]]; then
        DISTRO="rhel"
        DISTRO_VERSION=$(grep -oE '[0-9]+\.[0-9]+' /etc/redhat-release | head -1)
    elif [[ -f /etc/debian_version ]]; then
        DISTRO="debian"
        DISTRO_VERSION=$(cat /etc/debian_version)
    else
        log "ERROR" "Unable to detect Linux distribution"
        exit 1
    fi
    
    # Normalize distribution names
    case "$DISTRO" in
        "centos"|"rhel"|"rocky"|"almalinux") DISTRO="rhel" ;;
        "ubuntu"|"linuxmint"|"elementary") DISTRO="ubuntu" ;;
        "debian"|"raspbian") DISTRO="debian" ;;
        "opensuse"*|"sles") DISTRO="opensuse" ;;
        "archlinux"|"manjaro"|"endeavouros") DISTRO="arch" ;;
    esac
    
    # Detect package manager
    if command -v apt &> /dev/null; then
        PACKAGE_MANAGER="apt"
    elif command -v dnf &> /dev/null; then
        PACKAGE_MANAGER="dnf"
    elif command -v yum &> /dev/null; then
        PACKAGE_MANAGER="yum"
    elif command -v pacman &> /dev/null; then
        PACKAGE_MANAGER="pacman"
    elif command -v zypper &> /dev/null; then
        PACKAGE_MANAGER="zypper"
    elif command -v apk &> /dev/null; then
        PACKAGE_MANAGER="apk"
    fi
    
    # Detect service manager
    if systemctl --version &> /dev/null; then
        SERVICE_MANAGER="systemd"
    elif service --version &> /dev/null; then
        SERVICE_MANAGER="sysvinit"
    elif rc-service --version &> /dev/null; then
        SERVICE_MANAGER="openrc"
    fi
    
    # Detect network manager
    if systemctl is-active NetworkManager &> /dev/null 2>&1; then
        NETWORK_MANAGER="NetworkManager"
    elif systemctl is-active networking &> /dev/null 2>&1; then
        NETWORK_MANAGER="networking"
    elif systemctl is-active systemd-networkd &> /dev/null 2>&1; then
        NETWORK_MANAGER="systemd-networkd"
    else
        NETWORK_MANAGER="unknown"
    fi
    
    log "SUCCESS" "System detection completed"
    log "DEBUG" "Distro: $DISTRO, Package Manager: $PACKAGE_MANAGER, Service Manager: $SERVICE_MANAGER"
}

# Check prerequisites and permissions
check_prerequisites() {
    log "INFO" "Checking prerequisites..."
    
    # Check root privileges
    if [[ $EUID -ne 0 ]]; then
        log "ERROR" "This script requires root privileges. Please run with sudo."
        echo -e "\n${YELLOW}Usage: ${WHITE}sudo $0 ${GRAY}[options]${RESET}"
        exit 1
    fi
    
    # Check if sysctl is available
    if ! command -v sysctl &> /dev/null; then
        log "ERROR" "sysctl command not found. Please install procps package."
        exit 1
    fi
    
    # Create config directory if it doesn't exist
    CONFIG_DIR=$(dirname "${CONFIG_PATHS[$DISTRO]}")
    if [[ ! -d "$CONFIG_DIR" ]]; then
        mkdir -p "$CONFIG_DIR"
        log "INFO" "Created configuration directory: $CONFIG_DIR"
    fi
    
    log "SUCCESS" "Prerequisites check completed"
}

# Enhanced network status detection
get_network_status() {
    local ipv4_status="UNKNOWN"
    local ipv6_status="UNKNOWN"
    local ipv4_addresses=0
    local ipv6_addresses=0
    
    # Check IPv6 kernel setting
    if [[ -r /proc/sys/net/ipv6/conf/all/disable_ipv6 ]]; then
        local ipv6_disabled=$(cat /proc/sys/net/ipv6/conf/all/disable_ipv6)
        if [[ "$ipv6_disabled" -eq 0 ]]; then
            ipv6_status="ENABLED"
        else
            ipv6_status="DISABLED"
        fi
    fi
    
    # Count active network addresses
    if command -v ip &> /dev/null; then
        ipv4_addresses=$(ip -4 addr show | grep -c "inet " 2>/dev/null || echo 0)
        ipv6_addresses=$(ip -6 addr show | grep -c "inet6 " 2>/dev/null || echo 0)
        
        # Adjust IPv6 count (subtract loopback if present)
        local ipv6_loopback=$(ip -6 addr show lo | grep -c "inet6 ::1" 2>/dev/null || echo 0)
        ipv6_addresses=$((ipv6_addresses - ipv6_loopback))
    fi
    
    # Determine IPv4 status based on address count
    if [[ $ipv4_addresses -gt 1 ]]; then  # More than just loopback
        ipv4_status="ENABLED"
    elif [[ $ipv4_addresses -eq 1 ]]; then
        ipv4_status="LOOPBACK_ONLY"
    else
        ipv4_status="DISABLED"
    fi
    
    # Return results
    echo "$ipv4_status:$ipv6_status:$ipv4_addresses:$ipv6_addresses"
}

# Enhanced status display with detailed information
show_status() {
    log "INFO" "Analyzing current network stack configuration..."
    
    local status_info=$(get_network_status)
    IFS=':' read -r ipv4_status ipv6_status ipv4_count ipv6_count <<< "$status_info"
    
    echo -e "\n${BOLD}${CYAN}═══════════════════════════════════════${RESET}"
    echo -e "${BOLD}${WHITE} ${NETWORK_MARK} NETWORK STACK STATUS${RESET}"
    echo -e "${BOLD}${CYAN}═══════════════════════════════════════${RESET}"
    
    # IPv4 Status
    echo -ne "${BOLD}${YELLOW} IPv4 Stack:${RESET} "
    case "$ipv4_status" in
        "ENABLED") echo -e "${GREEN}${BOLD}${CHECK_MARK} ENABLED${RESET} ${GRAY}(${ipv4_count} addresses)${RESET}" ;;
        "LOOPBACK_ONLY") echo -e "${YELLOW}${BOLD}${WARNING_MARK} LOOPBACK ONLY${RESET} ${GRAY}(${ipv4_count} address)${RESET}" ;;
        "DISABLED") echo -e "${RED}${BOLD}${CROSS_MARK} DISABLED${RESET}" ;;
        *) echo -e "${GRAY}${BOLD}? UNKNOWN${RESET}" ;;
    esac
    
    # IPv6 Status
    echo -ne "${BOLD}${YELLOW} IPv6 Stack:${RESET} "
    case "$ipv6_status" in
        "ENABLED") echo -e "${GREEN}${BOLD}${CHECK_MARK} ENABLED${RESET} ${GRAY}(${ipv6_count} addresses)${RESET}" ;;
        "DISABLED") echo -e "${RED}${BOLD}${CROSS_MARK} DISABLED${RESET}" ;;
        *) echo -e "${GRAY}${BOLD}? UNKNOWN${RESET}" ;;
    esac
    
    # Network interfaces summary
    if command -v ip &> /dev/null; then
        local interfaces=$(ip link show | grep -E "^[0-9]+:" | grep -v "lo:" | wc -l)
        echo -e "${BOLD}${YELLOW} Interfaces:${RESET} ${WHITE}${interfaces}${RESET} ${GRAY}(excluding loopback)${RESET}"
    fi
    
    # Current configuration file
    echo -e "${BOLD}${YELLOW} Config File:${RESET} ${WHITE}${CONFIG_PATHS[$DISTRO]}${RESET}"
    if [[ -f "${CONFIG_PATHS[$DISTRO]}" ]]; then
        echo -e "${GRAY}   └─ Configuration exists${RESET}"
    else
        echo -e "${GRAY}   └─ No custom configuration${RESET}"
    fi
    
    echo -e "${BOLD}${CYAN}═══════════════════════════════════════${RESET}\n"
}

# IPv6 management functions
disable_ipv6() {
    log "INFO" "Disabling IPv6 stack..."
    
    local config_file="${CONFIG_PATHS[$DISTRO]}"
    
    cat > "$config_file" << 'EOF'
# IPv6 disabled by IPStack Switcher
# This configuration disables IPv6 system-wide
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1

# Additional hardening options
net.ipv6.conf.all.accept_ra = 0
net.ipv6.conf.default.accept_ra = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0
EOF
    
    # Apply configuration
    if sysctl -p "$config_file" &> /dev/null; then
        log "SUCCESS" "IPv6 disabled successfully"
        
        # Restart network services if needed
        restart_network_services
        
        # Verify the change
        sleep 2
        local verification=$(get_network_status)
        IFS=':' read -r _ ipv6_status _ _ <<< "$verification"
        if [[ "$ipv6_status" == "DISABLED" ]]; then
            log "SUCCESS" "IPv6 disable operation verified"
        else
            log "WARN" "IPv6 may still be active. A reboot might be required."
        fi
    else
        log "ERROR" "Failed to apply IPv6 disable configuration"
        return 1
    fi
}

enable_ipv6() {
    log "INFO" "Enabling IPv6 stack..."
    
    local config_file="${CONFIG_PATHS[$DISTRO]}"
    
    cat > "$config_file" << 'EOF'
# IPv6 enabled by IPStack Switcher
# This configuration enables IPv6 with security-conscious defaults
net.ipv6.conf.all.disable_ipv6 = 0
net.ipv6.conf.default.disable_ipv6 = 0
net.ipv6.conf.lo.disable_ipv6 = 0

# Security settings
net.ipv6.conf.all.accept_ra = 1
net.ipv6.conf.default.accept_ra = 1
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0
net.ipv6.conf.all.forwarding = 0
net.ipv6.conf.default.forwarding = 0
EOF
    
    # Apply configuration
    if sysctl -p "$config_file" &> /dev/null; then
        log "SUCCESS" "IPv6 enabled successfully"
        
        # Restart network services
        restart_network_services
        
        # Verify the change
        sleep 2
        local verification=$(get_network_status)
        IFS=':' read -r _ ipv6_status _ _ <<< "$verification"
        if [[ "$ipv6_status" == "ENABLED" ]]; then
            log "SUCCESS" "IPv6 enable operation verified"
        else
            log "WARN" "IPv6 may not be fully active yet. Please check your network configuration."
        fi
    else
        log "ERROR" "Failed to apply IPv6 enable configuration"
        return 1
    fi
}

# Network service management
restart_network_services() {
    log "INFO" "Restarting network services..."
    
    case "$SERVICE_MANAGER" in
        "systemd")
            case "$NETWORK_MANAGER" in
                "NetworkManager")
                    if systemctl restart NetworkManager &> /dev/null; then
                        log "SUCCESS" "NetworkManager restarted"
                    else
                        log "WARN" "Failed to restart NetworkManager"
                    fi
                    ;;
                "systemd-networkd")
                    if systemctl restart systemd-networkd &> /dev/null; then
                        log "SUCCESS" "systemd-networkd restarted"
                    fi
                    ;;
                "networking")
                    if systemctl restart networking &> /dev/null; then
                        log "SUCCESS" "networking service restarted"
                    fi
                    ;;
            esac
            ;;
        *)
            log "INFO" "Manual network service restart may be required"
            ;;
    esac
}

# Remove all IPv6 configurations
reset_configuration() {
    log "INFO" "Resetting IPv6 configuration to system defaults..."
    
    local config_file="${CONFIG_PATHS[$DISTRO]}"
    
    if [[ -f "$config_file" ]]; then
        rm -f "$config_file"
        log "SUCCESS" "Configuration file removed: $config_file"
    fi
    
    # Apply default kernel settings
    sysctl -w net.ipv6.conf.all.disable_ipv6=0 &> /dev/null
    sysctl -w net.ipv6.conf.default.disable_ipv6=0 &> /dev/null
    sysctl -w net.ipv6.conf.lo.disable_ipv6=0 &> /dev/null
    
    restart_network_services
    log "SUCCESS" "System reset to default network configuration"
}

# Interactive menu
show_interactive_menu() {
    while true; do
        show_banner
        show_status
        
        echo -e "${BOLD}${CYAN}Select Network Stack Configuration:${RESET}"
        echo -e "${YELLOW} 1.${RESET} ${WHITE}IPv4 Only${RESET} ${GRAY}(disable IPv6)${RESET}"
        echo -e "${YELLOW} 2.${RESET} ${WHITE}Dual Stack${RESET} ${GRAY}(enable both IPv4 and IPv6)${RESET}"
        echo -e "${YELLOW} 3.${RESET} ${WHITE}Reset to System Default${RESET} ${GRAY}(remove custom configuration)${RESET}"
        echo -e "${YELLOW} 4.${RESET} ${WHITE}Refresh Status${RESET} ${GRAY}(reload current state)${RESET}"
        echo -e "${YELLOW} 5.${RESET} ${WHITE}System Information${RESET} ${GRAY}(detailed system info)${RESET}"
        echo -e "${YELLOW} 0.${RESET} ${WHITE}Exit${RESET}"
        echo
        echo -ne "${BOLD}${CYAN}Enter your choice [0-5]:${RESET} "
        
        read -r choice
        echo
        
        case "$choice" in
            1)
                disable_ipv6
                echo -e "\n${YELLOW}Press Enter to continue...${RESET}"
                read -r
                ;;
            2)
                enable_ipv6
                echo -e "\n${YELLOW}Press Enter to continue...${RESET}"
                read -r
                ;;
            3)
                echo -e "${YELLOW}${WARNING_MARK} This will remove all custom IPv6 configurations.${RESET}"
                echo -ne "${BOLD}Are you sure? [y/N]:${RESET} "
                read -r confirm
                if [[ "$confirm" =~ ^[Yy]$ ]]; then
                    reset_configuration
                fi
                echo -e "\n${YELLOW}Press Enter to continue...${RESET}"
                read -r
                ;;
            4)
                log "INFO" "Refreshing network status..."
                sleep 1
                ;;
            5)
                show_system_info
                echo -e "\n${YELLOW}Press Enter to continue...${RESET}"
                read -r
                ;;
            0)
                echo -e "${CYAN}Thank you for using IPStack Switcher!${RESET}"
                echo -e "${GRAY}Report issues: ${GITHUB_REPO}/issues${RESET}"
                exit 0
                ;;
            *)
                log "ERROR" "Invalid option. Please select 0-5."
                sleep 2
                ;;
        esac
    done
}

# Detailed system information
show_system_info() {
    clear
    echo -e "${BOLD}${CYAN}═══════════════════════════════════════════════════════════════${RESET}"
    echo -e "${BOLD}${WHITE} ${INFO_MARK} DETAILED SYSTEM INFORMATION${RESET}"
    echo -e "${BOLD}${CYAN}═══════════════════════════════════════════════════════════════${RESET}"
    
    echo -e "${BOLD}${YELLOW}Operating System:${RESET}"
    echo -e "  Distribution: ${WHITE}${DISTRO^}${RESET}"
    echo -e "  Version: ${WHITE}${DISTRO_VERSION}${RESET}"
    echo -e "  Kernel: ${WHITE}$(uname -r)${RESET}"
    echo -e "  Architecture: ${WHITE}$(uname -m)${RESET}"
    echo
    
    echo -e "${BOLD}${YELLOW}System Management:${RESET}"
    echo -e "  Package Manager: ${WHITE}${PACKAGE_MANAGER}${RESET}"
    echo -e "  Service Manager: ${WHITE}${SERVICE_MANAGER}${RESET}"
    echo -e "  Network Manager: ${WHITE}${NETWORK_MANAGER}${RESET}"
    echo
    
    echo -e "${BOLD}${YELLOW}Network Interfaces:${RESET}"
    if command -v ip &> /dev/null; then
        ip link show | grep -E "^[0-9]+:" | while read -r line; do
            local interface=$(echo "$line" | cut -d: -f2 | tr -d ' ')
            local status=$(echo "$line" | grep -o "state [A-Z]*" | cut -d' ' -f2)
            echo -e "  ${interface}: ${WHITE}${status}${RESET}"
        done
    fi
    echo
    
    echo -e "${BOLD}${YELLOW}IPv6 Kernel Parameters:${RESET}"
    if [[ -r /proc/sys/net/ipv6/conf/all/disable_ipv6 ]]; then
        local disable_all=$(cat /proc/sys/net/ipv6/conf/all/disable_ipv6)
        local disable_default=$(cat /proc/sys/net/ipv6/conf/default/disable_ipv6)
        local disable_lo=$(cat /proc/sys/net/ipv6/conf/lo/disable_ipv6)
        
        echo -e "  disable_ipv6 (all): ${WHITE}${disable_all}${RESET}"
        echo -e "  disable_ipv6 (default): ${WHITE}${disable_default}${RESET}"
        echo -e "  disable_ipv6 (loopback): ${WHITE}${disable_lo}${RESET}"
    fi
    
    echo -e "${BOLD}${CYAN}═══════════════════════════════════════════════════════════════${RESET}"
}

# Usage information
show_usage() {
    echo -e "${BOLD}${WHITE}IPStack Switcher v${SCRIPT_VERSION} - Global Edition${RESET}"
    echo -e "${GRAY}Cross-distribution IPv4/IPv6 stack management tool${RESET}"
    echo
    echo -e "${BOLD}${YELLOW}USAGE:${RESET}"
    echo -e "  ${WHITE}sudo $0${RESET} ${GRAY}[OPTION]${RESET}"
    echo
    echo -e "${BOLD}${YELLOW}OPTIONS:${RESET}"
    echo -e "  ${GREEN}ipv4-only${RESET}     Disable IPv6, use IPv4 only"
    echo -e "  ${GREEN}dual-stack${RESET}    Enable both IPv4 and IPv6 (default)"
    echo -e "  ${GREEN}reset${RESET}         Reset to system default configuration"
    echo -e "  ${GREEN}status${RESET}        Show current network stack status"
    echo -e "  ${GREEN}info${RESET}          Display detailed system information"
    echo -e "  ${GREEN}version, -v${RESET}   Show version information"
    echo -e "  ${GREEN}help, -h${RESET}      Show this help message"
    echo
    echo -e "${BOLD}${YELLOW}EXAMPLES:${RESET}"
    echo -e "  ${WHITE}sudo $0 ipv4-only${RESET}   # Disable IPv6"
    echo -e "  ${WHITE}sudo $0 dual-stack${RESET}  # Enable both stacks"
    echo -e "  ${WHITE}sudo $0 status${RESET}      # Check current status"
    echo -e "  ${WHITE}sudo $0${RESET}             # Interactive mode"
    echo
    echo -e "${BOLD}${YELLOW}SUPPORTED DISTRIBUTIONS:${RESET}"
    echo -e "  Ubuntu, Debian, CentOS, RHEL, Fedora, Arch Linux, openSUSE, Alpine"
    echo
    echo -e "${BOLD}${YELLOW}MORE INFORMATION:${RESET}"
    echo -e "  Repository: ${CYAN}${GITHUB_REPO}${RESET}"
    echo -e "  Issues: ${CYAN}${GITHUB_REPO}/issues${RESET}"
}

# Version information
show_version() {
    echo -e "${BOLD}${WHITE}IPStack Switcher${RESET} ${GREEN}v${SCRIPT_VERSION}${RESET}"
    echo -e "${GRAY}Global Edition - Cross-distribution support${RESET}"
    echo
    echo -e "${YELLOW}System:${RESET} ${DISTRO^} ${DISTRO_VERSION} ($(uname -m))"
    echo -e "${YELLOW}Kernel:${RESET} $(uname -r)"
    echo -e "${YELLOW}Build:${RESET} $(date '+%Y-%m-%d')"
    echo
    echo -e "${YELLOW}Repository:${RESET} ${CYAN}${GITHUB_REPO}${RESET}"
    echo -e "${YELLOW}License:${RESET} MIT License"
}

#==============================================================================#
# MAIN EXECUTION
#==============================================================================#

main() {
    # Initialize system detection first
    detect_system
    
    # Then check prerequisites
    check_prerequisites
    
    # Parse command line arguments
    case "${1:-}" in
        "ipv4-only"|"ipv4"|"v4")
            show_banner
            disable_ipv6
            show_status
            ;;
        "dual-stack"|"dual"|"both"|"v46")
            show_banner
            enable_ipv6
            show_status
            ;;
        "reset"|"default")
            show_banner
            reset_configuration
            show_status
            ;;
        "status"|"stat")
            show_banner
            show_status
            ;;
        "info"|"sysinfo")
            show_system_info
            ;;
        "version"|"-v"|"--version")
            show_version
            ;;
        "help"|"-h"|"--help")
            show_usage
            ;;
        "")
            # Interactive mode
            show_interactive_menu
            ;;
        *)
            log "ERROR" "Unknown option: $1"
            echo
            show_usage
            exit 1
            ;;
    esac
    
    # Final status message for non-interactive modes
    if [[ $# -gt 0 ]]; then
        echo -e "\n${GREEN}${CHECK_MARK} Operation completed.${RESET}"
        echo -e "${GRAY}Some changes may require a system reboot to take full effect.${RESET}"
    fi
}

# Trap signals for clean exit
trap 'echo -e "\n${YELLOW}Operation interrupted by user.${RESET}"; exit 130' INT TERM

# Execute main function with all arguments
main "$@"
